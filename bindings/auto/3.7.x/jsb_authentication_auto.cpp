// clang-format off

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.0
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

/****************************************************************************
 Copyright (c) 2022-2023 Xiamen Yaji Software Co., Ltd.

 http://www.cocos.com

 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
 in the Software without restriction, including without limitation the rights to
 use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
 of the Software, and to permit persons to whom the Software is furnished to do so,
 subject to the following conditions:

 The above copyright notice and this permission notice shall be included in
 all copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 THE SOFTWARE.
****************************************************************************/

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-variable"
#elif defined(__GNUC__) || defined(__GNUG__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-variable"
#elif defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable : 4101)
#endif


#define SWIG_STD_MOVE(OBJ) std::move(OBJ)


#include <stdio.h>


#include "bindings/jswrapper/SeApi.h"
#include "bindings/manual/jsb_conversions.h"
#include "bindings/manual/jsb_global.h"


#include "jsb_authentication_auto.h"
#include "controller/controller.h"
#include "PersistentAppData.h"
// Add more includes in the generated source file bellow
// ...



se::Class* __jsb_authentication_IFirebaseAppGetter_class = nullptr;
se::Object* __jsb_authentication_IFirebaseAppGetter_proto = nullptr;
SE_DECLARE_FINALIZE_FUNC(js_delete_authentication_IFirebaseAppGetter) 

static bool js_authentication_IFirebaseAppGetter_getApp(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    authentication::IFirebaseAppGetter *arg1 = (authentication::IFirebaseAppGetter *) NULL ;
    firebase::App *result = 0 ;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECT<authentication::IFirebaseAppGetter>(s);
    if (nullptr == arg1) return true;
    result = (firebase::App *)(arg1)->getApp();
    
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments");
    SE_HOLD_RETURN_VALUE(result, s.thisObject(), s.rval()); 
    
    
    return true;
}
SE_BIND_FUNC(js_authentication_IFirebaseAppGetter_getApp) 

static bool js_delete_authentication_IFirebaseAppGetter(se::State& s)
{
    return true;
}
SE_BIND_FINALIZE_FUNC(js_delete_authentication_IFirebaseAppGetter) 

bool js_register_authentication_IFirebaseAppGetter(se::Object* obj) {
    auto* cls = se::Class::create("IFirebaseAppGetter", obj, nullptr, nullptr); 
    
    cls->defineStaticProperty("__isJSB", se::Value(true), se::PropertyAttribute::READ_ONLY | se::PropertyAttribute::DONT_ENUM | se::PropertyAttribute::DONT_DELETE);
    
    cls->defineFunction("getApp", _SE(js_authentication_IFirebaseAppGetter_getApp)); 
    
    
    
    
    cls->defineFinalizeFunction(_SE(js_delete_authentication_IFirebaseAppGetter));
    
    
    cls->install();
    JSBClassType::registerClass<authentication::IFirebaseAppGetter>(cls);
    
    __jsb_authentication_IFirebaseAppGetter_proto = cls->getProto();
    __jsb_authentication_IFirebaseAppGetter_class = cls;
    se::ScriptEngine::getInstance()->clearException();
    return true;
}


static bool js_authentication_onAuthResult(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    UserFuture *arg1 = 0 ;
    void *arg2 = (void *) NULL ;
    UserFuture temp1 ;
    
    if(argc != 2) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 2);
        return false;
    }
    
    ok &= sevalue_to_native(args[0], &temp1, s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments");
    arg1 = &temp1;
    
    ok &= sevalue_to_native(args[1], &arg2);
    SE_PRECONDITION2(ok, false, "Error processing arguments");
    authentication::onAuthResult((firebase::Future< firebase::auth::User * > const &)*arg1,arg2);
    
    
    return true;
}
SE_BIND_FUNC(js_authentication_onAuthResult) 

se::Class* __jsb_authentication_AuthenticationController_class = nullptr;
se::Object* __jsb_authentication_AuthenticationController_proto = nullptr;
SE_DECLARE_FINALIZE_FUNC(js_delete_authentication_AuthenticationController) 

static bool js_authentication_AuthenticationController_getInstance_static(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    authentication::AuthenticationController *result = 0 ;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    result = (authentication::AuthenticationController *)authentication::AuthenticationController::getInstance();
    
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments");
    SE_HOLD_RETURN_VALUE(result, s.thisObject(), s.rval()); 
    
    
    return true;
}
SE_BIND_FUNC(js_authentication_AuthenticationController_getInstance_static) 

static bool js_authentication_AuthenticationController_getUserInfo(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    authentication::AuthenticationController *arg1 = (authentication::AuthenticationController *) NULL ;
    UserInfo *result = 0 ;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECT<authentication::AuthenticationController>(s);
    if (nullptr == arg1) return true;
    result = (UserInfo *)(arg1)->getUserInfo();
    
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments");
    SE_HOLD_RETURN_VALUE(result, s.thisObject(), s.rval()); 
    
    
    return true;
}
SE_BIND_FUNC(js_authentication_AuthenticationController_getUserInfo) 

static bool js_authentication_AuthenticationController_isAppleSignInSupported(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    authentication::AuthenticationController *arg1 = (authentication::AuthenticationController *) NULL ;
    bool result;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECT<authentication::AuthenticationController>(s);
    if (nullptr == arg1) return true;
    result = (bool)(arg1)->isAppleSignInSupported();
    
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject());
    
    
    return true;
}
SE_BIND_FUNC(js_authentication_AuthenticationController_isAppleSignInSupported) 

static bool js_authentication_AuthenticationController_SignInAnonymously(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    authentication::AuthenticationController *arg1 = (authentication::AuthenticationController *) NULL ;
    bool arg2 ;
    
    if(argc != 1) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 1);
        return false;
    }
    arg1 = SE_THIS_OBJECT<authentication::AuthenticationController>(s);
    if (nullptr == arg1) return true;
    
    ok &= sevalue_to_native(args[0], &arg2);
    SE_PRECONDITION2(ok, false, "Error processing arguments"); 
    (arg1)->SignInAnonymously(arg2);
    
    
    return true;
}
SE_BIND_FUNC(js_authentication_AuthenticationController_SignInAnonymously) 

static bool js_authentication_AuthenticationController_SignInFacebook(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    authentication::AuthenticationController *arg1 = (authentication::AuthenticationController *) NULL ;
    bool arg2 ;
    std::vector< std::string > arg3 ;
    
    if(argc != 2) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 2);
        return false;
    }
    arg1 = SE_THIS_OBJECT<authentication::AuthenticationController>(s);
    if (nullptr == arg1) return true;
    
    ok &= sevalue_to_native(args[0], &arg2);
    SE_PRECONDITION2(ok, false, "Error processing arguments"); 
    
    ok &= sevalue_to_native(args[1], &arg3, s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments"); 
    
    (arg1)->SignInFacebook(arg2,arg3);
    
    
    return true;
}
SE_BIND_FUNC(js_authentication_AuthenticationController_SignInFacebook) 

static bool js_authentication_AuthenticationController_OnGGFirebaseTokenReceived(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    authentication::AuthenticationController *arg1 = (authentication::AuthenticationController *) NULL ;
    std::string arg2 ;
    
    if(argc != 1) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 1);
        return false;
    }
    arg1 = SE_THIS_OBJECT<authentication::AuthenticationController>(s);
    if (nullptr == arg1) return true;
    
    ok &= sevalue_to_native(args[0], &arg2, s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments"); 
    
    (arg1)->OnGGFirebaseTokenReceived(arg2);
    
    
    return true;
}
SE_BIND_FUNC(js_authentication_AuthenticationController_OnGGFirebaseTokenReceived) 

static bool js_authentication_AuthenticationController_SignInGoogle(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    authentication::AuthenticationController *arg1 = (authentication::AuthenticationController *) NULL ;
    bool arg2 ;
    
    if(argc != 1) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 1);
        return false;
    }
    arg1 = SE_THIS_OBJECT<authentication::AuthenticationController>(s);
    if (nullptr == arg1) return true;
    
    ok &= sevalue_to_native(args[0], &arg2);
    SE_PRECONDITION2(ok, false, "Error processing arguments"); 
    (arg1)->SignInGoogle(arg2);
    
    
    return true;
}
SE_BIND_FUNC(js_authentication_AuthenticationController_SignInGoogle) 

static bool js_authentication_AuthenticationController_SignInApple(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    authentication::AuthenticationController *arg1 = (authentication::AuthenticationController *) NULL ;
    bool arg2 ;
    
    if(argc != 1) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 1);
        return false;
    }
    arg1 = SE_THIS_OBJECT<authentication::AuthenticationController>(s);
    if (nullptr == arg1) return true;
    
    ok &= sevalue_to_native(args[0], &arg2);
    SE_PRECONDITION2(ok, false, "Error processing arguments"); 
    (arg1)->SignInApple(arg2);
    
    
    return true;
}
SE_BIND_FUNC(js_authentication_AuthenticationController_SignInApple) 

static bool js_authentication_AuthenticationController_SignInOnLinkFail(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    authentication::AuthenticationController *arg1 = (authentication::AuthenticationController *) NULL ;
    int arg2 ;
    
    if(argc != 1) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 1);
        return false;
    }
    arg1 = SE_THIS_OBJECT<authentication::AuthenticationController>(s);
    if (nullptr == arg1) return true;
    
    ok &= sevalue_to_native(args[0], &arg2, s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments"); 
    (arg1)->SignInOnLinkFail(arg2);
    
    
    return true;
}
SE_BIND_FUNC(js_authentication_AuthenticationController_SignInOnLinkFail) 

static bool js_authentication_AuthenticationController_isAutoSignIn(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    authentication::AuthenticationController *arg1 = (authentication::AuthenticationController *) NULL ;
    bool result;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECT<authentication::AuthenticationController>(s);
    if (nullptr == arg1) return true;
    result = (bool)(arg1)->isAutoSignIn();
    
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject());
    
    
    return true;
}
SE_BIND_FUNC(js_authentication_AuthenticationController_isAutoSignIn) 

static bool js_authentication_AuthenticationController_isLoggedInAnonymous(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    authentication::AuthenticationController *arg1 = (authentication::AuthenticationController *) NULL ;
    bool result;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECT<authentication::AuthenticationController>(s);
    if (nullptr == arg1) return true;
    result = (bool)(arg1)->isLoggedInAnonymous();
    
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject());
    
    
    return true;
}
SE_BIND_FUNC(js_authentication_AuthenticationController_isLoggedInAnonymous) 

static bool js_authentication_AuthenticationController_isLoggedInFB(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    authentication::AuthenticationController *arg1 = (authentication::AuthenticationController *) NULL ;
    bool result;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECT<authentication::AuthenticationController>(s);
    if (nullptr == arg1) return true;
    result = (bool)(arg1)->isLoggedInFB();
    
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject());
    
    
    return true;
}
SE_BIND_FUNC(js_authentication_AuthenticationController_isLoggedInFB) 

static bool js_authentication_AuthenticationController_isLoggedInFBGaming(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    authentication::AuthenticationController *arg1 = (authentication::AuthenticationController *) NULL ;
    bool result;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECT<authentication::AuthenticationController>(s);
    if (nullptr == arg1) return true;
    result = (bool)(arg1)->isLoggedInFBGaming();
    
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject());
    
    
    return true;
}
SE_BIND_FUNC(js_authentication_AuthenticationController_isLoggedInFBGaming) 

static bool js_authentication_AuthenticationController_isLoggedInGoogle(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    authentication::AuthenticationController *arg1 = (authentication::AuthenticationController *) NULL ;
    bool result;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECT<authentication::AuthenticationController>(s);
    if (nullptr == arg1) return true;
    result = (bool)(arg1)->isLoggedInGoogle();
    
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject());
    
    
    return true;
}
SE_BIND_FUNC(js_authentication_AuthenticationController_isLoggedInGoogle) 

static bool js_authentication_AuthenticationController_isLoggedInApple(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    authentication::AuthenticationController *arg1 = (authentication::AuthenticationController *) NULL ;
    bool result;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECT<authentication::AuthenticationController>(s);
    if (nullptr == arg1) return true;
    result = (bool)(arg1)->isLoggedInApple();
    
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject());
    
    
    return true;
}
SE_BIND_FUNC(js_authentication_AuthenticationController_isLoggedInApple) 

static bool js_authentication_AuthenticationController_fetchToken(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    authentication::AuthenticationController *arg1 = (authentication::AuthenticationController *) NULL ;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECT<authentication::AuthenticationController>(s);
    if (nullptr == arg1) return true;
    (arg1)->fetchToken();
    
    
    return true;
}
SE_BIND_FUNC(js_authentication_AuthenticationController_fetchToken) 

static bool js_authentication_AuthenticationController_getToken(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    authentication::AuthenticationController *arg1 = (authentication::AuthenticationController *) NULL ;
    std::string result;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECT<authentication::AuthenticationController>(s);
    if (nullptr == arg1) return true;
    result = (arg1)->getToken();
    
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "Error processing arguments");
    SE_HOLD_RETURN_VALUE(result, s.thisObject(), s.rval());
    
    
    
    return true;
}
SE_BIND_FUNC(js_authentication_AuthenticationController_getToken) 

static bool js_authentication_AuthenticationController_getUserID(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    authentication::AuthenticationController *arg1 = (authentication::AuthenticationController *) NULL ;
    std::string result;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECT<authentication::AuthenticationController>(s);
    if (nullptr == arg1) return true;
    result = (arg1)->getUserID();
    
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "Error processing arguments");
    SE_HOLD_RETURN_VALUE(result, s.thisObject(), s.rval());
    
    
    
    return true;
}
SE_BIND_FUNC(js_authentication_AuthenticationController_getUserID) 

static bool js_authentication_AuthenticationController_getUserDisplayName(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    authentication::AuthenticationController *arg1 = (authentication::AuthenticationController *) NULL ;
    std::string result;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECT<authentication::AuthenticationController>(s);
    if (nullptr == arg1) return true;
    result = (arg1)->getUserDisplayName();
    
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "Error processing arguments");
    SE_HOLD_RETURN_VALUE(result, s.thisObject(), s.rval());
    
    
    
    return true;
}
SE_BIND_FUNC(js_authentication_AuthenticationController_getUserDisplayName) 

static bool js_authentication_AuthenticationController_getUserPhotoUrl(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    authentication::AuthenticationController *arg1 = (authentication::AuthenticationController *) NULL ;
    std::string result;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECT<authentication::AuthenticationController>(s);
    if (nullptr == arg1) return true;
    result = (arg1)->getUserPhotoUrl();
    
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "Error processing arguments");
    SE_HOLD_RETURN_VALUE(result, s.thisObject(), s.rval());
    
    
    
    return true;
}
SE_BIND_FUNC(js_authentication_AuthenticationController_getUserPhotoUrl) 

static bool js_authentication_AuthenticationController_getFacebookProfile(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    authentication::AuthenticationController *arg1 = (authentication::AuthenticationController *) NULL ;
    firebase::auth::UserInfoInterface *result = 0 ;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECT<authentication::AuthenticationController>(s);
    if (nullptr == arg1) return true;
    result = (firebase::auth::UserInfoInterface *)(arg1)->getFacebookProfile();
    
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments");
    SE_HOLD_RETURN_VALUE(result, s.thisObject(), s.rval()); 
    
    
    return true;
}
SE_BIND_FUNC(js_authentication_AuthenticationController_getFacebookProfile) 

static bool js_authentication_AuthenticationController_getFacebookAccessToken(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    authentication::AuthenticationController *arg1 = (authentication::AuthenticationController *) NULL ;
    std::string result;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECT<authentication::AuthenticationController>(s);
    if (nullptr == arg1) return true;
    result = (arg1)->getFacebookAccessToken();
    
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "Error processing arguments");
    SE_HOLD_RETURN_VALUE(result, s.thisObject(), s.rval());
    
    
    
    return true;
}
SE_BIND_FUNC(js_authentication_AuthenticationController_getFacebookAccessToken) 

static bool js_authentication_AuthenticationController_getFacebookUserId(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    authentication::AuthenticationController *arg1 = (authentication::AuthenticationController *) NULL ;
    std::string result;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECT<authentication::AuthenticationController>(s);
    if (nullptr == arg1) return true;
    result = (arg1)->getFacebookUserId();
    
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "Error processing arguments");
    SE_HOLD_RETURN_VALUE(result, s.thisObject(), s.rval());
    
    
    
    return true;
}
SE_BIND_FUNC(js_authentication_AuthenticationController_getFacebookUserId) 

static bool js_authentication_AuthenticationController_getGoogleUserId(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    authentication::AuthenticationController *arg1 = (authentication::AuthenticationController *) NULL ;
    std::string result;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECT<authentication::AuthenticationController>(s);
    if (nullptr == arg1) return true;
    result = (arg1)->getGoogleUserId();
    
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "Error processing arguments");
    SE_HOLD_RETURN_VALUE(result, s.thisObject(), s.rval());
    
    
    
    return true;
}
SE_BIND_FUNC(js_authentication_AuthenticationController_getGoogleUserId) 

static bool js_authentication_AuthenticationController_tryInit(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    authentication::AuthenticationController *arg1 = (authentication::AuthenticationController *) NULL ;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECT<authentication::AuthenticationController>(s);
    if (nullptr == arg1) return true;
    (arg1)->tryInit();
    
    
    return true;
}
SE_BIND_FUNC(js_authentication_AuthenticationController_tryInit) 

static bool js_authentication_AuthenticationController_canLogOut(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    authentication::AuthenticationController *arg1 = (authentication::AuthenticationController *) NULL ;
    bool result;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECT<authentication::AuthenticationController>(s);
    if (nullptr == arg1) return true;
    result = (bool)(arg1)->canLogOut();
    
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject());
    
    
    return true;
}
SE_BIND_FUNC(js_authentication_AuthenticationController_canLogOut) 

static bool js_authentication_AuthenticationController_isGuestEnabled(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    authentication::AuthenticationController *arg1 = (authentication::AuthenticationController *) NULL ;
    bool result;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECT<authentication::AuthenticationController>(s);
    if (nullptr == arg1) return true;
    result = (bool)(arg1)->isGuestEnabled();
    
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject());
    
    
    return true;
}
SE_BIND_FUNC(js_authentication_AuthenticationController_isGuestEnabled) 

static bool js_authentication_AuthenticationController_canSendEmail(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    authentication::AuthenticationController *arg1 = (authentication::AuthenticationController *) NULL ;
    bool result;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECT<authentication::AuthenticationController>(s);
    if (nullptr == arg1) return true;
    result = (bool)(arg1)->canSendEmail();
    
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject());
    
    
    return true;
}
SE_BIND_FUNC(js_authentication_AuthenticationController_canSendEmail) 

static bool js_authentication_AuthenticationController_canManuallySignin(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    authentication::AuthenticationController *arg1 = (authentication::AuthenticationController *) NULL ;
    bool result;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECT<authentication::AuthenticationController>(s);
    if (nullptr == arg1) return true;
    result = (bool)(arg1)->canManuallySignin();
    
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject());
    
    
    return true;
}
SE_BIND_FUNC(js_authentication_AuthenticationController_canManuallySignin) 

static bool js_authentication_AuthenticationController_signOut(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    authentication::AuthenticationController *arg1 = (authentication::AuthenticationController *) NULL ;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECT<authentication::AuthenticationController>(s);
    if (nullptr == arg1) return true;
    (arg1)->signOut();
    
    
    return true;
}
SE_BIND_FUNC(js_authentication_AuthenticationController_signOut) 

static bool js_authentication_AuthenticationController_logOutFB(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    authentication::AuthenticationController *arg1 = (authentication::AuthenticationController *) NULL ;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECT<authentication::AuthenticationController>(s);
    if (nullptr == arg1) return true;
    (arg1)->logOutFB();
    
    
    return true;
}
SE_BIND_FUNC(js_authentication_AuthenticationController_logOutFB) 

static bool js_authentication_AuthenticationController_logOutGoogle(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    authentication::AuthenticationController *arg1 = (authentication::AuthenticationController *) NULL ;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECT<authentication::AuthenticationController>(s);
    if (nullptr == arg1) return true;
    (arg1)->logOutGoogle();
    
    
    return true;
}
SE_BIND_FUNC(js_authentication_AuthenticationController_logOutGoogle) 

static bool js_authentication_AuthenticationController_logOutApple(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    authentication::AuthenticationController *arg1 = (authentication::AuthenticationController *) NULL ;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECT<authentication::AuthenticationController>(s);
    if (nullptr == arg1) return true;
    (arg1)->logOutApple();
    
    
    return true;
}
SE_BIND_FUNC(js_authentication_AuthenticationController_logOutApple) 

static bool js_authentication_AuthenticationController_isReady(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    authentication::AuthenticationController *arg1 = (authentication::AuthenticationController *) NULL ;
    bool result;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECT<authentication::AuthenticationController>(s);
    if (nullptr == arg1) return true;
    result = (bool)(arg1)->isReady();
    
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject());
    
    
    return true;
}
SE_BIND_FUNC(js_authentication_AuthenticationController_isReady) 

static bool js_delete_authentication_AuthenticationController(se::State& s)
{
    return true;
}
SE_BIND_FINALIZE_FUNC(js_delete_authentication_AuthenticationController) 

bool js_register_authentication_AuthenticationController(se::Object* obj) {
    auto* cls = se::Class::create("AuthenticationController", obj, nullptr, nullptr); 
    
    cls->defineStaticProperty("__isJSB", se::Value(true), se::PropertyAttribute::READ_ONLY | se::PropertyAttribute::DONT_ENUM | se::PropertyAttribute::DONT_DELETE);
    
    cls->defineFunction("getUserInfo", _SE(js_authentication_AuthenticationController_getUserInfo)); 
    cls->defineFunction("isAppleSignInSupported", _SE(js_authentication_AuthenticationController_isAppleSignInSupported)); 
    cls->defineFunction("SignInAnonymously", _SE(js_authentication_AuthenticationController_SignInAnonymously)); 
    cls->defineFunction("SignInFacebook", _SE(js_authentication_AuthenticationController_SignInFacebook)); 
    cls->defineFunction("OnGGFirebaseTokenReceived", _SE(js_authentication_AuthenticationController_OnGGFirebaseTokenReceived)); 
    cls->defineFunction("SignInGoogle", _SE(js_authentication_AuthenticationController_SignInGoogle)); 
    cls->defineFunction("SignInApple", _SE(js_authentication_AuthenticationController_SignInApple)); 
    cls->defineFunction("SignInOnLinkFail", _SE(js_authentication_AuthenticationController_SignInOnLinkFail)); 
    cls->defineFunction("isAutoSignIn", _SE(js_authentication_AuthenticationController_isAutoSignIn)); 
    cls->defineFunction("isLoggedInAnonymous", _SE(js_authentication_AuthenticationController_isLoggedInAnonymous)); 
    cls->defineFunction("isLoggedInFB", _SE(js_authentication_AuthenticationController_isLoggedInFB)); 
    cls->defineFunction("isLoggedInFBGaming", _SE(js_authentication_AuthenticationController_isLoggedInFBGaming)); 
    cls->defineFunction("isLoggedInGoogle", _SE(js_authentication_AuthenticationController_isLoggedInGoogle)); 
    cls->defineFunction("isLoggedInApple", _SE(js_authentication_AuthenticationController_isLoggedInApple)); 
    cls->defineFunction("fetchToken", _SE(js_authentication_AuthenticationController_fetchToken)); 
    cls->defineFunction("getToken", _SE(js_authentication_AuthenticationController_getToken)); 
    cls->defineFunction("getUserID", _SE(js_authentication_AuthenticationController_getUserID)); 
    cls->defineFunction("getUserDisplayName", _SE(js_authentication_AuthenticationController_getUserDisplayName)); 
    cls->defineFunction("getUserPhotoUrl", _SE(js_authentication_AuthenticationController_getUserPhotoUrl)); 
    cls->defineFunction("getFacebookProfile", _SE(js_authentication_AuthenticationController_getFacebookProfile)); 
    cls->defineFunction("getFacebookAccessToken", _SE(js_authentication_AuthenticationController_getFacebookAccessToken)); 
    cls->defineFunction("getFacebookUserId", _SE(js_authentication_AuthenticationController_getFacebookUserId)); 
    cls->defineFunction("getGoogleUserId", _SE(js_authentication_AuthenticationController_getGoogleUserId)); 
    cls->defineFunction("tryInit", _SE(js_authentication_AuthenticationController_tryInit)); 
    cls->defineFunction("canLogOut", _SE(js_authentication_AuthenticationController_canLogOut)); 
    cls->defineFunction("isGuestEnabled", _SE(js_authentication_AuthenticationController_isGuestEnabled)); 
    cls->defineFunction("canSendEmail", _SE(js_authentication_AuthenticationController_canSendEmail)); 
    cls->defineFunction("canManuallySignin", _SE(js_authentication_AuthenticationController_canManuallySignin)); 
    cls->defineFunction("signOut", _SE(js_authentication_AuthenticationController_signOut)); 
    cls->defineFunction("logOutFB", _SE(js_authentication_AuthenticationController_logOutFB)); 
    cls->defineFunction("logOutGoogle", _SE(js_authentication_AuthenticationController_logOutGoogle)); 
    cls->defineFunction("logOutApple", _SE(js_authentication_AuthenticationController_logOutApple)); 
    cls->defineFunction("isReady", _SE(js_authentication_AuthenticationController_isReady)); 
    
    
    cls->defineStaticFunction("getInstance", _SE(js_authentication_AuthenticationController_getInstance_static)); 
    
    
    cls->defineFinalizeFunction(_SE(js_delete_authentication_AuthenticationController));
    
    
    cls->install();
    JSBClassType::registerClass<authentication::AuthenticationController>(cls);
    
    __jsb_authentication_AuthenticationController_proto = cls->getProto();
    __jsb_authentication_AuthenticationController_class = cls;
    se::ScriptEngine::getInstance()->clearException();
    return true;
}


se::Class* __jsb_authentication_PersistentAppData_class = nullptr;
se::Object* __jsb_authentication_PersistentAppData_proto = nullptr;
SE_DECLARE_FINALIZE_FUNC(js_delete_authentication_PersistentAppData) 

static bool js_authentication_PersistentAppData_getInstance_static(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    authentication::PersistentAppData *result = 0 ;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    result = (authentication::PersistentAppData *)authentication::PersistentAppData::getInstance();
    
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments");
    SE_HOLD_RETURN_VALUE(result, s.thisObject(), s.rval()); 
    
    
    return true;
}
SE_BIND_FUNC(js_authentication_PersistentAppData_getInstance_static) 

static bool js_authentication_PersistentAppData_saveData(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    authentication::PersistentAppData *arg1 = (authentication::PersistentAppData *) NULL ;
    std::string arg2 ;
    std::string arg3 ;
    
    if(argc != 2) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 2);
        return false;
    }
    arg1 = SE_THIS_OBJECT<authentication::PersistentAppData>(s);
    if (nullptr == arg1) return true;
    
    ok &= sevalue_to_native(args[0], &arg2, s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments"); 
    
    
    ok &= sevalue_to_native(args[1], &arg3, s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments"); 
    
    (arg1)->saveData(arg2,arg3);
    
    
    return true;
}
SE_BIND_FUNC(js_authentication_PersistentAppData_saveData) 

static bool js_authentication_PersistentAppData_getData(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    authentication::PersistentAppData *arg1 = (authentication::PersistentAppData *) NULL ;
    std::string arg2 ;
    std::string result;
    
    if(argc != 1) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 1);
        return false;
    }
    arg1 = SE_THIS_OBJECT<authentication::PersistentAppData>(s);
    if (nullptr == arg1) return true;
    
    ok &= sevalue_to_native(args[0], &arg2, s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments"); 
    
    result = (arg1)->getData(arg2);
    
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "Error processing arguments");
    SE_HOLD_RETURN_VALUE(result, s.thisObject(), s.rval());
    
    
    
    return true;
}
SE_BIND_FUNC(js_authentication_PersistentAppData_getData) 

static bool js_new_authentication_PersistentAppData(se::State& s) // NOLINT(readability-identifier-naming)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    
    authentication::PersistentAppData *result;
    result = (authentication::PersistentAppData *)new authentication::PersistentAppData();
    
    
    auto *ptr = JSB_MAKE_PRIVATE_OBJECT_WITH_INSTANCE(result);
    s.thisObject()->setPrivateObject(ptr);
    return true;
}
SE_BIND_CTOR(js_new_authentication_PersistentAppData, __jsb_authentication_PersistentAppData_class, js_delete_authentication_PersistentAppData)

static bool js_delete_authentication_PersistentAppData(se::State& s)
{
    return true;
}
SE_BIND_FINALIZE_FUNC(js_delete_authentication_PersistentAppData) 

bool js_register_authentication_PersistentAppData(se::Object* obj) {
    auto* cls = se::Class::create("PersistentAppData", obj, nullptr, _SE(js_new_authentication_PersistentAppData)); 
    
    cls->defineStaticProperty("__isJSB", se::Value(true), se::PropertyAttribute::READ_ONLY | se::PropertyAttribute::DONT_ENUM | se::PropertyAttribute::DONT_DELETE);
    
    cls->defineFunction("saveData", _SE(js_authentication_PersistentAppData_saveData)); 
    cls->defineFunction("getData", _SE(js_authentication_PersistentAppData_getData)); 
    
    
    cls->defineStaticFunction("getInstance", _SE(js_authentication_PersistentAppData_getInstance_static)); 
    
    
    cls->defineFinalizeFunction(_SE(js_delete_authentication_PersistentAppData));
    
    
    cls->install();
    JSBClassType::registerClass<authentication::PersistentAppData>(cls);
    
    __jsb_authentication_PersistentAppData_proto = cls->getProto();
    __jsb_authentication_PersistentAppData_class = cls;
    se::ScriptEngine::getInstance()->clearException();
    return true;
}




bool register_all_authentication(se::Object* obj) {
    // Get the ns
    se::Value nsVal;
    if (!obj->getProperty("authentication", &nsVal, true))
    {
        se::HandleObject jsobj(se::Object::createPlainObject());
        nsVal.setObject(jsobj);
        obj->setProperty("authentication", nsVal);
    }
    se::Object* ns = nsVal.toObject();
    /* Register classes */
    js_register_authentication_IFirebaseAppGetter(ns); 
    js_register_authentication_AuthenticationController(ns); 
    js_register_authentication_PersistentAppData(ns); 
    
    /* Register global variables & global functions */
    
    
    
    return true;
}


#if defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__) || defined(__GNUG__)
#pragma GCC diagnostic pop
#elif defined(_MSC_VER)
#pragma warning(pop)
#endif
// clang-format on
